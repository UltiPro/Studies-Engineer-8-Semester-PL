CREATE OR REPLACE PROCEDURE P_LOAD_DATA IS
BEGIN
    -------------------ZIP-------------------
    MERGE 
    INTO ZIP Z
    USING (
            SELECT DISTINCT ZIP, STATE
    FROM CUSTOMERS
            ) SUB
    ON (Z.ZIP_CODE = SUB.ZIP)
    WHEN NOT MATCHED THEN
        INSERT(ZIP_CODE,STATE) VALUES(SUB.ZIP,SUB.STATE);
    -------------------TIME-------------------
    MERGE 
    INTO TIME T
    USING(
            SELECT DISTINCT EXTRACT(MONTH FROM ORDERDATE) MONTH,
        EXTRACT(YEAR FROM ORDERDATE) YEAR
    FROM ORDERS
        ) SUB
    ON (T.MONTH=SUB.MONTH AND T.YEAR=SUB.YEAR)
    WHEN NOT MATCHED THEN
        INSERT(MONTH,YEAR) VALUES(SUB.MONTH,SUB.YEAR);
    -------------------SALE-------------------
    MERGE 
    INTO SALE S
    USING(
            SELECT Z.ID_ZIP, T.ID_TIME, SUM(OI.QUANTITY*B.RETAIL) SALE_AMOUNT
    FROM BOOKS B
        JOIN ORDERITEMS OI ON B.ISBN=OI.ISBN
        JOIN ORDERS O ON OI.ORDER#=O.ORDER#
        JOIN CUSTOMERS C ON C.CUSTOMER#=O.CUSTOMER#
        JOIN ZIP Z ON Z.ZIP_CODE=C.ZIP
        JOIN TIME T ON T.MONTH = EXTRACT(MONTH FROM O.ORDERDATE) AND
            T.YEAR = EXTRACT(YEAR FROM O.ORDERDATE)
    GROUP BY Z.ID_ZIP, T.ID_TIME 
        ) SUB
    ON (S.ID_ZIP = SUB.ID_ZIP AND S.ID_TIME = SUB.ID_TIME)
    WHEN MATCHED THEN
        UPDATE SET SALE_AMOUNT = SUB.SALE_AMOUNT
    WHEN NOT MATCHED THEN
        INSERT(ID_TIME,ID_ZIP,SALE_AMOUNT) 
            VALUES(SUB.ID_TIME, SUB.ID_ZIP,SUB.SALE_AMOUNT);
END;
/
------------------------------------------
CREATE OR REPLACE PACKAGE PAKIET AS
PROCEDURE P_LOAD_DATA;
PROCEDURE LOAD_STATE_PROFIT;
FUNCTION SALES_PROFIT
(P_STATE ORDERS.SHIPSTATE%TYPE)
RETURN NUMBER;
END PAKIET;
/
CREATE OR REPLACE PACKAGE BODY PAKIET AS
PROCEDURE P_LOAD_DATA IS
BEGIN
    -------------------ZIP-------------------
    MERGE 
    INTO ZIP Z
    USING (
            SELECT DISTINCT ZIP, STATE
    FROM CUSTOMERS
            ) SUB
    ON (Z.ZIP_CODE = SUB.ZIP)
    WHEN NOT MATCHED THEN
        INSERT(ZIP_CODE,STATE) VALUES(SUB.ZIP,SUB.STATE);
    -------------------TIME-------------------
    MERGE 
    INTO TIME T
    USING(
            SELECT DISTINCT EXTRACT(MONTH FROM ORDERDATE) MONTH,
        EXTRACT(YEAR FROM ORDERDATE) YEAR
    FROM ORDERS
        ) SUB
    ON (T.MONTH=SUB.MONTH AND T.YEAR=SUB.YEAR)
    WHEN NOT MATCHED THEN
        INSERT(MONTH,YEAR) VALUES(SUB.MONTH,SUB.YEAR);
    -------------------SALE-------------------
    MERGE 
    INTO SALE S
    USING(
            SELECT Z.ID_ZIP, T.ID_TIME, SUM(OI.QUANTITY*B.RETAIL) SALE_AMOUNT
    FROM BOOKS B
        JOIN ORDERITEMS OI ON B.ISBN=OI.ISBN
        JOIN ORDERS O ON OI.ORDER#=O.ORDER#
        JOIN CUSTOMERS C ON C.CUSTOMER#=O.CUSTOMER#
        JOIN ZIP Z ON Z.ZIP_CODE=C.ZIP
        JOIN TIME T ON T.MONTH = EXTRACT(MONTH FROM O.ORDERDATE) AND
            T.YEAR = EXTRACT(YEAR FROM O.ORDERDATE)
    GROUP BY Z.ID_ZIP, T.ID_TIME 
        ) SUB
    ON (S.ID_ZIP = SUB.ID_ZIP AND S.ID_TIME = SUB.ID_TIME)
    WHEN MATCHED THEN
        UPDATE SET SALE_AMOUNT = SUB.SALE_AMOUNT
    WHEN NOT MATCHED THEN
        INSERT(ID_TIME,ID_ZIP,SALE_AMOUNT) 
            VALUES(SUB.ID_TIME, SUB.ID_ZIP,SUB.SALE_AMOUNT);
END
P_LOAD_DATA;
---------------------------------------------------
PROCEDURE LOAD_STATE_PROFIT IS
CURSOR C_PROFIT IS
SELECT DISTINCT SHIPSTATE, SALES_PROFIT(SHIPSTATE) PROFIT
FROM ORDERS;
X NUMBER;
BEGIN
    FOR I IN C_PROFIT LOOP
    SELECT COUNT(*)
    INTO X
    FROM PROFIT_BY_STATE
    WHERE STATE=I.SHIPSTATE;
    IF X = 0 THEN
    INSERT INTO PROFIT_BY_STATE
    VALUES(I.SHIPSTATE, I.PROFIT);
    ELSE
    UPDATE PROFIT_BY_STATE SET PROFIT = I.PROFIT;
END
IF;
    END LOOP;
END LOAD_STATE_PROFIT;
-------------------------------------------------------------
FUNCTION SALES_PROFIT
(P_STATE ORDERS.SHIPSTATE%TYPE)
RETURN NUMBER
IS
PROFIT NUMBER;
BEGIN
    SELECT SUM(OI.QUANTITY*(B.RETAIL-B.COST))
    INTO PROFIT
    FROM BOOKS B JOIN ORDERITEMS OI ON B.ISBN=OI.ISBN JOIN
        ORDERS O ON OI.ORDER#=O.ORDER#
    WHERE UPPER(O.SHIPSTATE) = UPPER(P_STATE);
    RETURN PROFIT;
END
SALES_PROFIT;
END PAKIET;
/
DROP PROCEDURE P_LOAD_DATA;
DROP PROCEDURE LOAD_STATE_PROFIT;
DROP FUNCTION SALES_PROFIT;
SELECT SHIPSTATE, PAKIET.SALES_PROFIT(SHIPSTATE)
FROM ORDERS;
EXEC PAKIET.p_load_data;
EXEC PAKIET.load_state_profit;