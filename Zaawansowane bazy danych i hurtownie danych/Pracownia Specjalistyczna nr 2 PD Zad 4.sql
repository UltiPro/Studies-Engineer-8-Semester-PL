CREATE OR REPLACE PACKAGE PKG AS
PROCEDURE TEMP_TO_NEW_TEMP;
FUNCTION F_PROFIT_BY_STATE_AND_YEAR(F_STATE VARCHAR2, F_DATE VARCHAR2) RETURN NUMBER;
END;
/
CREATE OR REPLACE PACKAGE BODY PKG AS
    PROCEDURE TEMP_TO_NEW_TEMP IS
    BEGIN
        MERGE
        INTO CATEGORY_TEMP CT
        USING (
            SELECT DISTINCT CATEGORY
            FROM TEMP
        ) STC
        ON (CT.CATEGORY = STC.CATEGORY)
        WHEN NOT MATCHED THEN
            INSERT(CATEGORY) VALUES(STC.CATEGORY);
        ------------------------------------------
        MERGE
        INTO CUSTOMER_TEMP CT
        USING (
            SELECT DISTINCT EMAILID
            FROM TEMP
        ) STE
        ON (CT.EMAILID = STE.EMAILID)
        WHEN NOT MATCHED THEN
            INSERT(EMAILID) VALUES(STE.EMAILID);
        ------------------------------------------
        MERGE
        INTO GEOGRAPHY_TEMP GT
        USING (
            SELECT DISTINCT SUBSTR(GEOGRAPHY, 1, INSTR(GEOGRAPHY, ',') - 1) AS COUNTRY,
                SUBSTR(GEOGRAPHY, INSTR(GEOGRAPHY, ',') + 1, INSTR(GEOGRAPHY, ',', 1, 2) - INSTR(GEOGRAPHY, ',') - 1) AS CITY,
                SUBSTR(GEOGRAPHY, INSTR(GEOGRAPHY, ',', 1, 2) + 1) AS STATE
            FROM TEMP
        ) STG
        ON (GT.COUNTRY_NAME = STG.COUNTRY AND GT.STATE_NAME = STG.STATE AND GT.CITY_NAME = STG.CITY)
        WHEN NOT MATCHED THEN
            INSERT(COUNTRY_NAME, STATE_NAME, CITY_NAME) VALUES(STG.COUNTRY, STG.STATE, STG.CITY);
        ------------------------------------------
        MERGE
        INTO PRODUCT_TEMP PT
        USING (
            SELECT DISTINCT PRODUCT_NAME, CATEGORY
            FROM TEMP
        ) STP
        ON (PT.PRODUCT_NAME = STP.PRODUCT_NAME)
        WHEN NOT MATCHED THEN
            INSERT(PRODUCT_NAME, CATEGORY_ID) 
                VALUES(STP.PRODUCT_NAME, (SELECT CATEGORY_ID FROM CATEGORY_TEMP CT WHERE CT.CATEGORY = STP.CATEGORY));    
        ------------------------------------------ 
        MERGE
        INTO ORDER_TEMP OT
        USING (
            SELECT DISTINCT ORDER_ID, ORDER_DATE, SHIP_DATE, EMAILID, 
                SUBSTR(GEOGRAPHY, 1, INSTR(GEOGRAPHY, ',') - 1) AS COUNTRY,
                SUBSTR(GEOGRAPHY, INSTR(GEOGRAPHY, ',') + 1, INSTR(GEOGRAPHY, ',', 1, 2) - INSTR(GEOGRAPHY, ',') - 1) AS CITY,
                SUBSTR(GEOGRAPHY, INSTR(GEOGRAPHY, ',', 1, 2) + 1) AS STATE
            FROM TEMP
        ) STO
        ON (OT.STRING_ORDER_ID = STO.ORDER_ID AND OT.ORDER_DATE = STO.ORDER_DATE AND OT.SHIP_DATE = STO.SHIP_DATE)
        WHEN NOT MATCHED THEN
            INSERT(STRING_ORDER_ID, ORDER_DATE, SHIP_DATE, CUSTOMER_ID, GEOGRAPHY_ID) 
                VALUES(STO.ORDER_ID, STO.ORDER_DATE, STO.SHIP_DATE, 
                    (SELECT CUSTOMER_ID FROM CUSTOMER_TEMP CT WHERE CT.EMAILID = STO.EMAILID), 
                    (SELECT GEOGRAPHY_ID FROM GEOGRAPHY_TEMP GT WHERE GT.COUNTRY_NAME = STO.COUNTRY AND GT.STATE_NAME = STO.STATE AND GT.CITY_NAME = STO.CITY));
        ------------------------------------------ 
        MERGE INTO ORDER_PRODUCT_TEMP OPT
        USING (
            SELECT OT.ORDER_ID, PT.PRODUCT_ID, T.SALES, T.QUANTITY, T.PROFIT
            FROM TEMP T
            JOIN ORDER_TEMP OT ON T.ORDER_ID = OT.STRING_ORDER_ID
            JOIN PRODUCT_TEMP PT ON T.PRODUCT_NAME = PT.PRODUCT_NAME
        ) STOPRO
        ON (STOPRO.ORDER_ID = OPT.ORDER_ID AND STOPRO.PRODUCT_ID = OPT.PRODUCT_ID)
        WHEN NOT MATCHED THEN
            INSERT (ORDER_ID, PRODUCT_ID, SALES, QUANTITY, PROFIT) 
            VALUES (STOPRO.ORDER_ID, STOPRO.PRODUCT_ID, STOPRO.SALES, STOPRO.QUANTITY, STOPRO.PROFIT);
    END TEMP_TO_NEW_TEMP;
    FUNCTION F_PROFIT_BY_STATE_AND_YEAR(F_STATE VARCHAR2, F_DATE VARCHAR2) RETURN NUMBER IS PROFIT NUMBER := 0;
    BEGIN
        SELECT SUM(OPT.QUANTITY * OPT.PROFIT)
        INTO PROFIT
        FROM ORDER_TEMP OT, ORDER_PRODUCT_TEMP OPT, GEOGRAPHY_TEMP GT
        WHERE OT.ORDER_ID = OPT.ORDER_ID AND OT.GEOGRAPHY_ID = GT.GEOGRAPHY_ID AND EXTRACT(YEAR FROM OT.ORDER_DATE) = TO_NUMBER(F_DATE) AND GT.STATE_NAME = F_STATE;
        RETURN PROFIT;
    END F_PROFIT_BY_STATE_AND_YEAR;
END PKG;